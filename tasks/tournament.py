'''

B. Турнирная таблица
Ограничение времени 	2 секунды
Ограничение памяти 	64Mb
Ввод 	стандартный ввод или input.txt
Вывод 	стандартный вывод или output.txt
Многие программисты любят играть в шахматы. Некоторые даже проводят свои турниры. Но они не хотят следить за тем, кто сколько очков набрал и какое место занял, они хотят просто складывать результаты матчей в базу данных, после чего получать турнирную таблицу с количеством набранных очков и итоговым положением.

Одна из таких групп программистов попросила вас помочь им и, пока они играют в шахматы, написать программу, которая будет строить итоговую турнирную таблицу.
Формат ввода
Входные данные представляют собой набор строк, каждая строка описывает ровно одну сыгранную партию. В каждой строке записаны фамилии обоих участников и результат матча. Фамилии и результат разделяются знаком тире, отбитым с обеих сторон пробелами. Каждая фамилия состоит только из латинских букв, начинается с заглавной буквы, все остальные буквы строчные, гарантируется что длина каждой фамилии не превосходит 30 символов.

Счет может быть записан тремя способами: 1:0, 0:1 и 0.5:0.5, первый вариант означает победу первого игрока, второй — второго, третий — ничью.

Гарантируется, что нет ни одной пары участников с одинаковыми фамилиями, что ни одна пара участников не играла между собой более одного раза и что общее число участников не превосходит 100.

Формат вывода
Вам нужно построить турнирную таблицу с результатами.

Каждая строка таблицы — представление результатов каждого из участников, участники должны быть упорядочены в лексикографическом порядке. В первом столбце содержится порядковый номер участника, во втором — фамилия. Далее следует n столбцов, в каждом из которых содержится информация об играх с остальными участниками: в случае победы в ячейке должна присутствовать буква W, в случае поражения — L, в случае ничьей — D, если участники не играли друг с другом — пробельный символ, если заполняется ячейка матча игрока с самим собой, то туда следует поставить символ X. В последних двух столбцах должно быть выписано количество набранных участником очков и итоговое место.

Участники, набравшие наибольшее количество очков, занимают первое место, следующие после них — второе, следующие — третье. Места, начиная с четвертого, не присуждаются. Для простоты группа программистов за победу присуждает два очка, за ничью — одно очко, за поражение очки не присуждаются.

Все столбцы должны иметь минимально возможную ширину, чтобы вместить данные в каждой строке. Для столбцов, содержащих порядковые номера, количество набранных очков и занятые места, все данные выравниваются по правому краю, все фамилии выравниваются по левому краю, после каждой фамилии в таблице должен гарантированно присутствовать пробел.

Оформляя таблицу, ориентируйтесь на примеры.

Пример 1
Ввод
Вывод

Ivanov - Petrov - 1:0

	

+-+-------+-+-+-+-+
|1|Ivanov |X|W|2|1|
+-+-------+-+-+-+-+
|2|Petrov |L|X|0|2|
+-+-------+-+-+-+-+

Пример 2
Ввод
Вывод

A - B - 0.5:0.5
B - Qu - 1:0
A - Qu - 0.5:0.5
C - Qu - 0:1
D - Qu - 1:0
D - B - 1:0

	

+-+---+-+-+-+-+-+-+-+
|1|A  |X|D| | |D|2|3|
+-+---+-+-+-+-+-+-+-+
|2|B  |D|X| |L|W|3|2|
+-+---+-+-+-+-+-+-+-+
|3|C  | | |X| |L|0| |
+-+---+-+-+-+-+-+-+-+
|4|D  | |W| |X|W|4|1|
+-+---+-+-+-+-+-+-+-+
|5|Qu |D|L|W|L|X|3|2|
+-+---+-+-+-+-+-+-+-+

'''

from sys import stdin

L, D, W = RES_FOR_SCORE = 'LDW'
SCORE = 'score'
PLACE = 'place'


def tournament(games):
	players = set()
	[players.update(game_data[:2]) for game_data in games]
	players = sorted(players)
	table = {pa: {pb: 'X' if pa == pb else ' ' for pb in players} for pa in players}
	for player_a, player_b, score_a, score_b in games:
		table[player_a][player_b] = RES_FOR_SCORE[score_a]
		table[player_b][player_a] = RES_FOR_SCORE[score_b]
		table[player_a][SCORE] = table[player_a].get(SCORE, 0) + score_a
		table[player_b][SCORE] = table[player_b].get(SCORE, 0) + score_b
	prize_scores = sorted({dic[SCORE] for dic in table.values()})[-1:-4:-1]
	for d in table.values():
		d[PLACE] = 1 + prize_scores.index(d[SCORE]) if d[SCORE] in prize_scores else ' '
	nw = len(str(len(players)))
	pw = 1 + max([len(player) for player in players])
	sw = len(str(prize_scores[0]))
	lines = ['+' + nw*'-' + '+' + pw*'-' + len(players)*'+-' + '+' + sw*'-' + '+-+']
	for n, (p, dic) in enumerate(table.items()):
		lines.append('|' + str(n+1).rjust(nw) + '|' + p.ljust(pw) + '|' + 
                     '|'.join([dic[pb] for pb in players]) + '|' + 
                     str(dic[SCORE]).rjust(sw) + '|' + str(dic[PLACE]) + '|')
		lines.append(lines[0])
	return lines


line = stdin.readline().strip()
games = []
while line:
	player_a, player_b, game_score = line.split(' - ')
	score_a, score_b = [int(2 * float(score)) for score in game_score.split(':')]
	games.append([player_a, player_b, score_a, score_b])
	line = stdin.readline().strip()
for line in tournament(games):
	print(line)
